{"version":3,"sources":["components/ContactListItem/ContactListItem.js","components/ContactList/ConactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactListItem","id","name","number","onDelete","className","type","onClick","ContactList","contacts","map","contact","ContactForm","onSubmit","useState","setName","setNumber","handleChange","event","target","value","reset","preventDefault","onChange","pattern","title","required","Filter","App","contactList","setContacts","filter","setFilter","uuidv4","normalizedName","toLowerCase","includes","alert","prevState","currentTarget","normalizedFilter","getFiltredContacts","contactId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33df6432.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ id, name, number, onDelete }) => {\n  return (\n    <li key={id} className=\"item\">\n      <p className=\"contactInfo\">\n        {name}: {number}\n      </p>\n      <button className=\"deleteBtn\" type=\"button\" onClick={() => onDelete(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport './ContactList.scss';\n\nconst ContactList = ({ contacts, onDelete }) => {\n  return (\n    <ul className=\"contactList\">\n      {contacts.map(contact => (\n        <ContactListItem\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n          onDelete={onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useState } from 'react';\nimport './ContactForm.scss';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'number':\n        setNumber(event.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"contactForm\" onSubmit={handleSubmit}>\n      <label className=\"label__name\">\n        Name\n        <input\n          className=\"input__form\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className=\"label__name\">\n        Number\n        <input\n          className=\"input__form\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className=\"addContactBtn\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import PropTypes from 'prop-types';\nimport './Filter.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"label__name\">\n    Find contact by name\n    <input\n      className=\"input__form\"\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState } from 'react';\nimport './App.scss';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport { v4 as uuidv4 } from 'uuid';\nimport contactList from './contactList.json';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(contactList);\n  const [filter, setFilter] = useState('');\n\n  const contactFormSubmit = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    //console.log('change', contact);\n\n    const normalizedName = contacts.map(contact => contact.name.toLowerCase());\n\n    //console.log('hello', normalizedName);\n\n    if (normalizedName.includes(contact.name.toLowerCase())) {\n      alert(`${contact.name} is already in contacts`);\n    } else {\n      setContacts(prevState => [...prevState, contact]);\n    }\n  };\n\n  const onDelete = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getFiltredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"main__title\">Phonebook</h1>\n      <ContactForm onSubmit={contactFormSubmit} />\n\n      <h2 className=\"contacts__title\">Contacts</h2>\n\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactList contacts={getFiltredContacts()} onDelete={onDelete} />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}