{"version":3,"sources":["components/ContactListItem/ContactListItem.js","components/ContactList/ConactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactListItem","id","name","number","onDelete","className","type","onClick","ContactList","contacts","map","contact","ContactForm","state","handleSubmit","event","preventDefault","props","onSubmit","reset","handleChange","currentTarget","value","setState","this","onChange","pattern","title","required","Component","Filter","App","filter","contactFormSubmit","uuidv4","normalizedName","toLowerCase","includes","alert","contactId","prevState","changeFilter","getFiltredContacts","normalizedFilter","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filtredContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0529b72e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ id, name, number, onDelete }) => {\n  return (\n    <li key={id} className=\"item\">\n      <p className=\"contactInfo\">\n        {name}: {number}\n      </p>\n      <button className=\"deleteBtn\" type=\"button\" onClick={() => onDelete(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport './ContactList.scss';\n\nconst ContactList = ({ contacts, onDelete }) => {\n  return (\n    <ul className=\"contactList\">\n      {contacts.map(contact => (\n        <ContactListItem\n          key={contact.id}\n          id={contact.id}\n          name={contact.name}\n          number={contact.number}\n          onDelete={onDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport './ContactForm.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    // console.log(this.state);\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"contactForm\" onSubmit={this.handleSubmit}>\n        <label className=\"label__name\">\n          Name\n          <input\n            className=\"input__form\"\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label className=\"label__name\">\n          Number\n          <input\n            className=\"input__form\"\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className=\"addContactBtn\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport './Filter.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"label__name\">\n    Find contact by name\n    <input\n      className=\"input__form\"\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport { v4 as uuidv4 } from 'uuid';\nimport contacts from './contacts.json';\n\nclass App extends Component {\n  state = {\n    contacts: contacts,\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    // console.log(parsedContacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(prevState);\n    // console.log(this.state);\n\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  contactFormSubmit = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    //console.log(contact);\n\n    const normalizedName = this.state.contacts.map(contact =>\n      contact.name.toLowerCase(),\n    );\n\n    if (normalizedName.includes(contact.name.toLowerCase())) {\n      alert(`${contact.name} is already in contacts`);\n    } else {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    }\n  };\n\n  onDelete = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  // onDelete = contactId => {\n  //   this.setState({contacts: this.state.contacts.filter(contact => contact.id !== contactId),\n  //   })\n  // }\n\n  changeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getFiltredContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filtredContacts = this.getFiltredContacts();\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"main__title\">Phonebook</h1>\n        <ContactForm onSubmit={this.contactFormSubmit} />\n\n        <h2 className=\"contacts__title\">Contacts</h2>\n\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList contacts={filtredContacts} onDelete={this.onDelete} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}